---
layout: post
title: "Vorteile Abstrakter Klassen"
date: 2017-04-27 12:00 +0100
categories: se2
author: "Michael Strassberger"
---

Dateien:

* [Eclipse Projekt]({{ site.url }}/downloads/se2-2017/abstrakt-vererbung.zip)
* [Violet UML Datei]({{ site.url }}/downloads/se2-2017/abstrakt-vererbung.class.violet.html)


Wir nehmen die Modellierung mehrer Kontoarten als Beispiel für
die Vorteile von Abstrakten Klassen. Zunächst schreiben wir
unsere AbstraktKonto Klasse, welche Operationen implementiert, die alle Kontoarten gemeinsam haben.

    {% highlight java linenos %}
    public abstract class AbstraktKonto 
    {
        protected int _saldo;

        public final void einzahlen(int betrag) 
        {
            _saldo += betrag;
        }

        abstract public void abheben(int betrag);

        public int gibSaldo() 
        {
            return _saldo;
        }
    }
{% endhighlight %}

Erklärungen zu den Zeilen:
* Z.3 ***protected*** bewirkt hier, dass das Feld auch im Subtyp ganz normal wie eine private Exemplarvariable verwendet werden kann
* Z.5 ***final*** bewirkt, dass ein Subtyp diese Methode nicht überschreiben darf
* Z.10 In abstrakten Klassen dürfen auch abstrakte Methoden deklariert werden. Konkrete Klassen, deren Supertyp eine solche Klasse ist, müssen dann die abstrakten Methoden implementieren, ähnlich wie bei einem Interface. 

Nun, nachdem wir mit unseren abstrakten Klasse das allgemeine Verhalten eines Kontos implementiert haben, widmen wir uns jetzt unserer ersten konkreten Klasse, dem
Sparkonto:
{% highlight java linenos %}
public class Sparkonto extends AbstraktKonto 
{
	@Override
	public void abheben(int betrag) 
	{
		if(super._saldo >= betrag)
		{
			super._saldo -= betrag;
		}
	}
}
{% endhighlight %}

Es fällt auf, das wir hier nur die Implementation für die ***abheben*** Operation schreiben müssen. Dies ist eines der angesprochenen Vorteile: es wird die Implementation einer abstrakten Klasse vererbt. Damit der Vorteil etwas deutlicher wird, implementieren wir jetzt noch ein Girokonto mit dispo.

{% highlight java linenos %}
public class Girokonto extends AbstraktKonto 
{
	private int _dispo;
	
	@Override
	public void abheben(int betrag) 
	{
		if(super._saldo + _dispo >= betrag)
		{
			super._saldo -= betrag;
		}
	}
}
{% endhighlight %}

Durch die Implementationsvererbung konnten wir uns in diesem Fall also sparen, ***einzahlen*** und ***gibSaldo*** mehrfach zu implementieren.
Um das Beispiel weiter auszubauen, könnte man vereinfacht davon ausgehen, dass ein Tagesgeldkonto in etwa dem Sparkonto entspräche und eine Kreditkarte einem Girokonto.
Wenn wir dies mithilfe eines UML-Klassendiagramms modellieren, sähe das folgendermaßen aus:  
![UML Klassendiagramm Konten]({{ site.url }}/images/abstrakt-uml-konto.png)  

Ein weiterer Vorteil unserer Implementationsvererbung ist: wenn wir jetzt merken, dass unsere ***einzahlen*** Methode einen Fehler hat, müssen wir sie nicht mehrmals ändern.
Dazu nehmen wir einfach mal an, dass ***einzahlen*** mit negativen Zahlen aufgerufen worden ist. Dies würde einen Abheben entsprechen, was wir aber nicht wollen.
Um diesen Fehler zu beheben müssen wir nur AbstraktKonto abändern:

{% highlight java linenos %}
public abstract class AbstraktKonto 
{
	protected int _saldo;

	public final void einzahlen(int betrag) 
	{
		if(betrag > 0)
		{
			_saldo += betrag;

		}
	}
{% endhighlight %}

Dank der Vererbung haben wir nun den Fehler in allen 4 Klassen behoben.

Ich hoffe, es wurde deutlich, warum Implementationsvererbung mächtig und zugleich in der Softwareentwicklung sinnvoll ist. Bis zum nächsten Mal!
